**Основные структуры данных**

1. **Массив (Array)**
   - Доступ: O(1)
   - Поиск: O(n)
   - Вставка/удаление: O(n) (из-за сдвига элементов)
   - Используется для хранения упорядоченных данных.

2. **Связный список (Linked List)**
   - Доступ: O(n)
   - Поиск: O(n)
   - Вставка/удаление: O(1) (если известен узел)
   - Бывает односвязным, двусвязным и кольцевым.

3. **Стек (Stack)**
   - Основные операции: push (добавление), pop (удаление)
   - Вставка/удаление: O(1)
   - Используется для рекурсии, обработки выражений, backtracking.

4. **Очередь (Queue)**
   - Основные операции: enqueue (добавление), dequeue (удаление)
   - Вставка/удаление: O(1)
   - Варианты: обычная очередь, двусторонняя (deque), приоритетная.

5. **Хеш-таблица (Hash Table, Hash Map)**
   - Доступ: O(1) (в среднем), O(n) (в худшем случае — при коллизиях)
   - Вставка/удаление: O(1)
   - Используется для реализации словарей, кэширования.

6. **Деревья (Trees)**
   - Дерево поиска (BST): O(log n) поиск, вставка, удаление (сбалансированное)
   - AVL, Red-Black Tree: самобалансирующиеся деревья
   - Используется для хранения упорядоченных данных, построения индексов.

7. **Графы (Graphs)**
   - Представление: список смежности, матрица смежности
   - BFS (поиск в ширину) – O(V + E)
   - DFS (поиск в глубину) – O(V + E)
   - Используется для моделирования сетей, маршрутизации.

8. **Куча (Heap, Priority Queue)**
   - Операции: вставка O(log n), удаление O(log n), доступ к минимуму/максимуму O(1)
   - Используется в алгоритмах Дейкстры, планировщиках задач.

**Дополнительно:**
- **Трип (Trie)** – эффективно хранит и ищет строки.
- **Дек (Deque)** – быстрая работа с обоих концов.

***Советы***:
- Знать реализацию каждой структуры и их слабые/сильные стороны.
- Практиковать задачи на LeetCode, Codeforces, HackerRank.
- Уметь анализировать сложность операций (Big O).

